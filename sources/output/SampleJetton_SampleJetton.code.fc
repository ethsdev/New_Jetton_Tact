#pragma version =0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

(slice, slice) __tact_load_address_opt(slice cs) inline {
    slice raw = cs~load_msg_addr();
    if (raw.preload_uint(2) != 0) {
        return (cs, __tact_verify_address(raw));
    } else {
        return (cs, null());
    }
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    var addr = b.end_cell().begin_parse();
    return __tact_verify_address(addr);
}

slice __tact_compute_contract_address(int chain, cell code, cell data) inline {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    return __tact_create_address(chain, hash);
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

(int, slice, int, slice) __tact_context_get() inline { return __tact_context; }

slice __tact_context_get_sender() inline { return __tact_context_sender; }

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(135, ok);
    return data;
}

(slice, ((int, slice))) __gen_read_Mint(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4235234258);
    var v'amount = sc_0~load_int(257);
    var v'receiver = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'receiver));
}

builder __gen_write_TokenTransferInternal(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref {
    var (v'queryId, v'amount, v'from, v'response_destination, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell __gen_writecell_TokenTransferInternal((int, int, slice, slice, int, slice) v) inline {
    return __gen_write_TokenTransferInternal(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice, slice))) __gen_read_TokenBurnNotification(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2078119902);
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'owner = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address_opt();
    return (sc_0, (v'queryId, v'amount, v'owner, v'response_destination));
}

builder __gen_write_TokenExcesses(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell __gen_writecell_TokenExcesses((int) v) inline {
    return __gen_write_TokenExcesses(begin_cell(), v).end_cell();
}

(slice, ((cell))) __gen_read_TokenUpdateContent(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2937889386);
    var v'content = sc_0~load_ref();
    return (sc_0, (v'content));
}

builder __gen_write_SampleJetton(builder build_0, (int, int, slice, cell, int) v) inline {
    var (v'totalSupply, v'max_supply, v'owner, v'content, v'mintable) = v;
    build_0 = build_0.store_coins(v'totalSupply);
    build_0 = build_0.store_coins(v'max_supply);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'content);
    build_0 = build_0.store_int(v'mintable, 1);
    return build_0;
}

(slice, ((int, int, slice, cell, int))) __gen_read_SampleJetton(slice sc_0) inline {
    var v'totalSupply = sc_0~load_coins();
    var v'max_supply = sc_0~load_coins();
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    var v'mintable = sc_0~load_int(1);
    return (sc_0, (v'totalSupply, v'max_supply, v'owner, v'content, v'mintable));
}

_ __gen_StateInit_get_code((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return v'code;
}

(int, int, slice, cell, cell) __gen_JettonData_to_external(((int, int, slice, cell, cell)) v) inline {
    var (v'totalSupply, v'mintable, v'owner, v'content, v'walletCode) = v; 
    return (v'totalSupply, v'mintable, v'owner, v'content, v'walletCode);
}

(slice, ((slice, cell, int))) __gen_read_$init$SampleJetton(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    var v'max_supply = sc_0~load_int(257);
    return (sc_0, (v'owner, v'content, v'max_supply));
}

builder __gen_write_$init$JettonDefaultWallet(builder build_0, (slice, slice) v) inline {
    var (v'master, v'owner) = v;
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(int, int, slice, cell, int) $__gen_SampleJetton_init(slice $owner, cell $content, int $max_supply) impure inline_ref {
    var (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)) = (null(), null(), null(), null(), null());
    $self'totalSupply = 0;
    $self'max_supply = $max_supply;
    $self'owner = $owner;
    $self'mintable = true;
    $self'content = $content;
    return ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable);
}

(int, int, slice, cell, int) __gen_load_SampleJetton() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_SampleJetton();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, cell content, int max_supply) = $sc~__gen_read_$init$SampleJetton();
        $sc.end_parse();
        return $__gen_SampleJetton_init(owner, content, max_supply);
    }
}

() __gen_store_SampleJetton((int, int, slice, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_SampleJetton(b, v);
    set_data(b.end_cell());
}

cell $emptyCell() impure inline_ref {
    return end_cell(begin_cell());
}

slice $__gen_Cell_asSlice(cell $self) impure inline_ref {
    var ($self) = $self;
    return begin_parse($self);
}

slice $emptySlice() impure inline_ref {
    return $__gen_Cell_asSlice($emptyCell());
}

slice $contractAddress((cell, cell) $s) impure inline_ref {
    var (($s'code, $s'data)) = $s;
    return __tact_compute_contract_address(0, $s'code, $s'data);
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, int, slice, slice, int, slice)) __gen_constructor_TokenTransferInternal$queryId_amount_from_response_destination_forward_ton_amount_forward_payload(int queryId, int amount, slice from, slice response_destination, int forward_ton_amount, slice forward_payload) inline {
    return (queryId, amount, from, response_destination, forward_ton_amount, forward_payload);
}

(cell, cell) $__gen_JettonDefaultWallet_init_child(cell sys', slice $master, slice $owner) {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: JettonDefaultWallet
    cell mine = __tact_dict_get_code(source, 55471);
    contracts = __tact_dict_set_code(contracts, 55471, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = __gen_write_$init$JettonDefaultWallet(b, ($master, $owner));
    return (mine, b.end_cell());
}

((int, int, slice, cell, int), (cell, cell)) $__gen_SampleJetton_getJettonWalletInit((int, int, slice, cell, int) $self, slice $address) impure inline_ref {
    var (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)) = $self;
    return (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable), $__gen_JettonDefaultWallet_init_child(__tact_context_sys, my_address(), $address));
}

((int, int, slice, cell, int), ()) $__gen_SampleJetton_mint((int, int, slice, cell, int) $self, slice $to, int $amount, slice $response_destination) impure inline_ref {
    var (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)) = $self;
    throw_unless(6898, (($self'totalSupply + $amount) <= $self'max_supply));
    $self'totalSupply = ($self'totalSupply + $amount);
    var ($winit'code, $winit'data) = ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)~$__gen_SampleJetton_getJettonWalletInit($to);
    $send(__gen_constructor_SendParameters$to_value_bounce_mode_body_code_data($contractAddress(($winit'code, $winit'data)), 0, false, 64, __gen_writecell_TokenTransferInternal(__gen_constructor_TokenTransferInternal$queryId_amount_from_response_destination_forward_ton_amount_forward_payload(0, $amount, my_address(), $response_destination, 0, $emptySlice())), $winit'code, $winit'data));
    return (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable), ());
}

((int, int, slice, cell, int), ()) $__gen_SampleJetton_requireWallet((int, int, slice, cell, int) $self, slice $owner) impure inline_ref {
    var (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    var ($winit'code, $winit'data) = ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)~$__gen_SampleJetton_getJettonWalletInit($owner);
    throw_unless(4429, __tact_address_eq($contractAddress(($winit'code, $winit'data)), $ctx'sender));
    return (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable), ());
}

((int, int, slice, cell, cell)) __gen_constructor_JettonData$totalSupply_mintable_owner_content_walletCode(int totalSupply, int mintable, slice owner, cell content, cell walletCode) inline {
    return (totalSupply, mintable, owner, content, walletCode);
}

(int, int, slice, cell, cell) $__gen_SampleJetton_get_jetton_data((int, int, slice, cell, int) $self) impure inline_ref {
    var (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)) = $self;
    cell $code = __gen_StateInit_get_code(($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)~$__gen_SampleJetton_getJettonWalletInit(my_address()));
    return __gen_constructor_JettonData$totalSupply_mintable_owner_content_walletCode($self'totalSupply, $self'mintable, $self'owner, $self'content, $code);
}

_ $__gen_get_get_jetton_data() method_id(106029) {
    var self = __gen_load_SampleJetton();
    var res = $__gen_SampleJetton_get_jetton_data(self);
    return __gen_JettonData_to_external(res);
}

slice $__gen_SampleJetton_get_wallet_address((int, int, slice, cell, int) $self, slice $owner) impure inline_ref {
    var (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)) = $self;
    var ($winit'code, $winit'data) = ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)~$__gen_SampleJetton_getJettonWalletInit($owner);
    return $contractAddress(($winit'code, $winit'data));
}

_ $__gen_get_get_wallet_address(slice $$owner) method_id(103289) {
    slice $owner = __tact_verify_address($$owner);
    var self = __gen_load_SampleJetton();
    var res = $__gen_SampleJetton_get_wallet_address(self, $owner);
    return res;
}

((int, int, slice, cell, int), ()) $__gen_SampleJetton_requireOwner((int, int, slice, cell, int) $self) impure inline_ref {
    var (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)) = $self;
    throw_unless(132, __tact_address_eq(__tact_context_get_sender(), $self'owner));
    return (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable), ());
}

slice $__gen_SampleJetton_owner((int, int, slice, cell, int) $self) impure inline_ref {
    var (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)) = $self;
    return $self'owner;
}

_ $__gen_get_owner() method_id(83229) {
    var self = __gen_load_SampleJetton();
    var res = $__gen_SampleJetton_owner(self);
    return res;
}

(((int, int, slice, cell, int)), ()) $__gen_SampleJetton_receive_Mint((int, int, slice, cell, int) $self, (int, slice) $msg) impure inline {
    var ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable) = $self;
    var ($msg'amount, $msg'receiver) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(3734, __tact_address_eq($ctx'sender, $self'owner));
    throw_unless(18668, $self'mintable);
    ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)~$__gen_SampleJetton_mint($msg'receiver, $msg'amount, $self'owner);
    return (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable), ());
}

((int, int, slice, cell, int), ()) $__gen_SampleJetton_receive_comment_fcbeb9a480966477480639c7cea4a578aa6a113b2903b26d01bc384663eceef6((int, int, slice, cell, int) $self) impure inline {
    var ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(18668, $self'mintable);
    ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)~$__gen_SampleJetton_mint($ctx'sender, 100, $self'owner);
    return (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable), ());
}

((int, int, slice, cell, int), ()) $__gen_SampleJetton_receive_comment_dc004c5b75be74376bd79df8713f2390620cc8a3095068b0583eb28ca3ac8ba0((int, int, slice, cell, int) $self) impure inline {
    var ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(3734, __tact_address_eq($ctx'sender, $self'owner));
    $self'mintable = false;
    return (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable), ());
}

(((int, int, slice, cell, int)), ()) $__gen_SampleJetton_receive_TokenUpdateContent((int, int, slice, cell, int) $self, (cell) $msg) impure inline {
    var ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable) = $self;
    var ($msg'content) = $msg;
    ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)~$__gen_SampleJetton_requireOwner();
    $self'content = $msg'content;
    return (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable), ());
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int)) __gen_constructor_TokenExcesses$queryId(int queryId) inline {
    return (queryId);
}

(((int, int, slice, cell, int)), ()) $__gen_SampleJetton_receive_TokenBurnNotification((int, int, slice, cell, int) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable) = $self;
    var ($msg'queryId, $msg'amount, $msg'owner, $msg'response_destination) = $msg;
    ($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable)~$__gen_SampleJetton_requireWallet($msg'owner);
    $self'totalSupply = ($self'totalSupply - $msg'amount);
    if ((~ null?($msg'response_destination))) {
        $send(__gen_constructor_SendParameters$to_value_bounce_mode_body(__tact_not_null($msg'response_destination), 0, false, (64 + 2), __gen_writecell_TokenExcesses(__gen_constructor_TokenExcesses$queryId($msg'queryId))));
    }
    return (($self'totalSupply, $self'max_supply, $self'owner, $self'content, $self'mintable), ());
}

((int, int, slice, cell, int), int) __gen_router_SampleJetton((int, int, slice, cell, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive Mint message
    if (op == 4235234258) {
        var msg = in_msg~__gen_read_Mint();
        self~$__gen_SampleJetton_receive_Mint(msg);
        return (self, true);
    }
    
    ;; Receive TokenUpdateContent message
    if (op == 2937889386) {
        var msg = in_msg~__gen_read_TokenUpdateContent();
        self~$__gen_SampleJetton_receive_TokenUpdateContent(msg);
        return (self, true);
    }
    
    ;; Receive TokenBurnNotification message
    if (op == 2078119902) {
        var msg = in_msg~__gen_read_TokenBurnNotification();
        self~$__gen_SampleJetton_receive_TokenBurnNotification(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Mint: 100" message
        if (text_op == 0xfcbeb9a480966477480639c7cea4a578aa6a113b2903b26d01bc384663eceef6) {
            self~$__gen_SampleJetton_receive_comment_fcbeb9a480966477480639c7cea4a578aa6a113b2903b26d01bc384663eceef6();
            return (self, true);
        }
        
        ;; Receive "Owner: MintClose" message
        if (text_op == 0xdc004c5b75be74376bd79df8713f2390620cc8a3095068b0583eb28ca3ac8ba0) {
            self~$__gen_SampleJetton_receive_comment_dc004c5b75be74376bd79df8713f2390620cc8a3095068b0583eb28ca3ac8ba0();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_SampleJetton();
    
    ;; Handle operation
    int handled = self~__gen_router_SampleJetton(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_SampleJetton(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.jetton.master"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmQe1yJvNTp6wf5urXJCzDdUth5MDqnKHQWpvYhKyRcn2G";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
